/* DList1.java */

/**
 *  A DList1 is a mutable doubly-linked list.  (No sentinel, not
 *  circularly linked.)
 */

public class DList1 {

  /**
   *  head references the first node.
   *  tail references the last node.
   *
   *  DO NOT CHANGE THE FOLLOWING FIELD DECLARATIONS.
   */

  protected DListNode1 head;
  protected DListNode1 tail;
  protected long size;

  /* DList1 invariants:
   *  1)  head.prev == null.
   *  2)  tail.next == null.
   *  3)  For any DListNode1 x in a DList, if x.next == y and x.next != null,
   *      then y.prev == x.
   *  4)  For any DListNode1 x in a DList, if x.prev == y and x.prev != null,
   *      then y.next == x.
   *  5)  The tail can be accessed from the head by a sequence of "next"
   *      references.
   *  6)  size is the number of DListNode1s that can be accessed from the
   *      head by a sequence of "next" references.
   */

  /**
   *  DList1() constructor for an empty DList1.
   */
  public DList1() {
    head = null;
    tail = null;
    size = 0;
  }

  /**
   *  DList1() constructor for a one-node DList1.
   */
  public DList1(run a) {
    head = new DListNode1();
    tail = head;
    head.item = a;
    size = 1;
  }
    public DList1(run a, int h, int w) {
    head = new DListNode1(h,w);
    tail = head;
    head.item = a;
    size = 1;
  }
  /**
   *  DList1() constructor for a two-node DList1.
   */
  public DList1(run a, run b) {
    head = new DListNode1();
    head.item = a;
    tail = new DListNode1();
    tail.item = b;
    head.next = tail;
    tail.prev = head;
    size = 2;
  }
public DList1(run a, run b, int h, int w) {
    head = new DListNode1(h,w);
    head.item = a;
    tail = new DListNode1(h,w);
    tail.item = b;
    head.next = tail;
    tail.prev = head;
    size = 2;
  }

  /**
   *  insertFront() inserts an item at the front of a DList1.
   */
  public void insertFront(int width,int height) {
    // Your solution here.
	  DListNode1 firstNode=new DListNode1(width,height);
	  if (size==0){
		  head=firstNode;
		  tail=firstNode;
	  }else if(size==1){
		  firstNode.next=head;
		  head=firstNode;
		  tail.prev=head;
	  } 
	  else {
		  head.prev=firstNode;
		  firstNode.next=head.next;
		  head=firstNode; 
		  
	  }
	  size++;  
  }

  /**
   *  removeFront() removes the first item (and node) from a DList1.  If the
   *  list is empty, do nothing.
   */
  public void removeFront() {
    // Your solution here.
	 if(size!=0){
	  if(size==1){
		 head=null;
		 tail=null;
	 }
	 if(size==2){
		 head=tail;
		 tail.prev=null;
	 }
	 if(size>2){
		 head.next.prev=null;
		 head=head.next;		 
	 }
	 size--;
  }
  }
  /**
   *  toString() returns a String representation of this DList.
   *
   *  DO NOT CHANGE THIS METHOD.
   *
   *  @return a String representation of this DList.
   */
  public String toString() {
    String result = "[  ";
    DListNode1 current = head;
    while (current != null) {
      result = result + current.item + "  ";
      current = current.next;
    }
    return result + "]";
  }

 
}
